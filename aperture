import matplotlib.pyplot as plt
from matplotlib import rcParams
from astropy.nddata.utils import Cutout2D

from astropy.io import fits
from astropy.stats import SigmaClip
from astropy.visualization import simple_norm
from astropy.visualization.mpl_normalize import ImageNormalize
from astropy.visualization import SqrtStretch
norm = ImageNormalize(stretch=SqrtStretch())

from photutils.aperture import ApertureStats
from photutils.aperture import CircularAperture, CircularAnnulus
from photutils.aperture import aperture_photometry
from photutils.centroids import centroid_sources
from photutils.centroids import centroid_com, centroid_quadratic

import pandas as pd
import numpy as np

name = 'j9h803020_drz.fits'
hdulist = fits.open(name)
data = hdulist[1].data
hdr = hdulist[0].header
filt = hdr['FILTER1']

fig = plt.figure(figsize=(3, 3))
plt.title(str(filt))
plt.imshow(data, norm=norm, origin='lower', cmap='binary', interpolation='nearest')
plt.colorbar(orientation='vertical', location='right', fraction=0.046, pad=0.04)

lst = pd.read_csv('ref', decimal=',', header=None)
# lst

# вычисление центроидов
x_init = lst.iloc[:,0].astype('float64')
y_init = lst.iloc[:,1].astype('float64')
x, y = centroid_sources(data, x_init, y_init, box_size=7,
                        centroid_func=centroid_quadratic)
# создание пар центроидов
pairs = np.transpose([x,y])
print(pairs[0])

# строим апертуры для объекта и локального фона
aperture = CircularAperture(pairs, r=3)
annulus_aperture = CircularAnnulus(pairs, r_in=3, r_out=5)

norm = simple_norm(data, 'sqrt', percent=99)
plt.imshow(data, norm=norm, interpolation='nearest')
plt.xlim(pairs[0][0]-20, pairs[0][0]+20)
plt.ylim(pairs[0][1]-20, pairs[0][1]+20)

ap_patches = aperture.plot(color='white', lw=2, label='Photometry aperture')
ann_patches = annulus_aperture.plot(color='red', lw=2, label='Background annulus')
handles = (ap_patches[0], ann_patches[0])
plt.legend(loc=(1.1, 0.01), facecolor='#458989', labelcolor='white',
           handles=handles, prop={'weight': 'bold', 'size': 11})

phot_table = aperture_photometry(data, aperture)
for col in phot_table.colnames:
    phot_table[col].info.format = '%.8g'  # for consistent table output
# print(phot_table)

# вычисляем локальный фон
sigclip = SigmaClip(sigma=3., maxiters=3)
aperstats = ApertureStats(data, annulus_aperture, sigma_clip=sigclip)
bkg_mean = aperstats.median
# print(bkg_mean)

aperture_area = aperture.area
total_bkg = bkg_mean * aperture_area
# print(total_bkg)

phot_bkgsub = phot_table['aperture_sum'] - total_bkg
phot_table['total_bkg'] = total_bkg
phot_table['aperture_sum_bkgsub'] = phot_bkgsub
for col in phot_table.colnames:
    phot_table[col].info.format = '%.8g'  # for consistent table output
# print(phot_table)

from acstools import acszpt                 
date = hdr['DATE-OBS']
print(date)
detector = hdr['DETECTOR']
print(detector)
q = acszpt.Query(date=date, detector=detector)
# zpt_table = q.fetch()
q_filter = acszpt.Query(date=date, 
                        detector=detector, 
                        filt=filt)
filter_zpt = q_filter.fetch()
print(filter_zpt)

# вычислечение mag опорных без учёта апертурной поправки
mag = -2.5 * np.log10(phot_bkgsub) + 26.416
print(mag)

# вычислечение mag опорных после учёта апертурной поправки
mag_corr = mag - 0.21

# вычислечение поправки на бесконечность
inf = -2.5 * np.log10(0.916)

mag_inf = mag_corr - inf
print(mag_inf)
np.savetxt('/media/amina/50A693D8A693BCC2/NGC2403/hst/606/606_mag', mag_inf)
# тут объект первый

